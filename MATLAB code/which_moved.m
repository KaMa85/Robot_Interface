function points=which_moved(distinctPaths_in_function,num_of_distinct_paths, modified_path,ax,ay,az)
    % modified_path=jsonresponse_moving_points.new_path; 
%     modified_path='(0.6339042, 0.6431496, -0.4320052) (0.6340293, 0.6431052, -0.4320358) (0.6344042, 0.6429721, -0.4321275) (0.6350289, 0.6427503, -0.4322802) (0.6359025, 0.6424403, -0.4324937) (0.6370243, 0.642042, -0.432768) (0.638393, 0.6415562, -0.4331026) (0.6400075, 0.6409831, -0.4334973) (0.641866, 0.6403234, -0.4339517) (0.6439668, 0.6395777, -0.4344653) (0.6463078, 0.6387468, -0.4350376) (0.6488866, 0.6378314, -0.435668) (0.6517007, 0.6368325, -0.4363559) (0.6547474, 0.6357511, -0.4371008) (0.6580235, 0.6345881, -0.4379017) (0.661526, 0.6333449, -0.438758) (0.6652514, 0.6320225, -0.4396687) (0.6691958, 0.6306224, -0.440633) (0.6733556, 0.6291458, -0.44165) (0.6777266, 0.6275943, -0.4427185) (0.6823043, 0.6259694, -0.4438377) (0.6870844, 0.6242726, -0.4450063) (0.6920622, 0.6225057, -0.4462232) (0.6972327, 0.6206704, -0.4474872) (0.7025907, 0.6187685, -0.4487971) (0.7081311, 0.6168018, -0.4501516) (0.7138483, 0.6147724, -0.4515493) (0.7197367, 0.6126823, -0.4529888) (0.7257906, 0.6105334, -0.4544688) (0.7320038, 0.6083279, -0.4559878) (0.7383703, 0.606068, -0.4575442) (0.7448838, 0.603756, -0.4591366) (0.751538, 0.601394, -0.4607633) (0.7583261, 0.5989845, -0.4624228) (0.7652415, 0.5965298, -0.4641134) (0.7722774, 0.5940323, -0.4658335) (0.7794269, 0.5914945, -0.4675814) (0.7866828, 0.5889189, -0.4693553) (0.7940381, 0.5863081, -0.4711534) (0.8014855, 0.5836645, -0.4729741) (0.8090175, 0.5809909, -0.4748155) (0.8166203, 0.578279, -0.4766865) (0.8242524, 0.5754769, -0.478639) (0.8318217, 0.5724607, -0.4807969) (0.8393039, 0.5692266, -0.4831655) (0.8466947, 0.5657979, -0.4857236) (0.8540098, 0.5622171, -0.4884303) (0.8612923, 0.5585512, -0.491219) (0.8686406, 0.554925, -0.4939651) (0.8762122, 0.5515494, -0.496458) (0.8841392, 0.5486835, -0.4984446) (0.8924682, 0.5466338, -0.4996347) (0.9010548, 0.5456221, -0.4998341) (0.9096652, 0.5454608, -0.4992381) (0.9181131, 0.5462381, -0.4977804) (0.9263145, 0.5476777, -0.4957262) (0.9342626, 0.5495815, -0.4932609) (0.9419767, 0.5518115, -0.4905115) (0.9494815, 0.5542709, -0.4875662) (0.956801, 0.5568905, -0.4844875) (0.9639555, 0.559619, -0.4813215) (0.9709619, 0.5624166, -0.478104) (0.9778345, 0.5652508, -0.4748639) (0.984586, 0.5680937, -0.4716261) (0.9912286, 0.5709196, -0.4684136) (0.997775, 0.5737025, -0.4652496) (1.00424, 0.5764137, -0.4621596) (1.010644, 0.5790181, -0.4591745) (1.017014, 0.5814677, -0.4563367) (1.023383, 0.5837002, -0.4537016) (1.029673, 0.5858082, -0.4511896) (1.03582, 0.5878686, -0.4487343) (1.041819, 0.5898795, -0.4463381) (1.047664, 0.5918387, -0.4440033) (1.05335, 0.5937443, -0.4417324) (1.05887, 0.5955946, -0.4395275) (1.06422, 0.5973877, -0.4373908) (1.069393, 0.5991217, -0.4353244) (1.074385, 0.6007951, -0.4333303) (1.079192, 0.602406, -0.4314106) (1.083807, 0.6039531, -0.4295671) (1.088227, 0.6054346, -0.4278016) (1.092448, 0.6068492, -0.4261159) (1.096464, 0.6081954, -0.4245116) (1.100273, 0.609472, -0.4229904) (1.10387, 0.6106777, -0.4215537) (1.107252, 0.6118112, -0.4202029) (1.110415, 0.6128715, -0.4189394) (1.113357, 0.6138574, -0.4177644) (1.116074, 0.6147682, -0.4166791) (1.118564, 0.6156028, -0.4156846) (1.120824, 0.6163604, -0.4147818) (1.122852, 0.6170403, -0.4139716) (1.124647, 0.6176417, -0.4132548) (1.126206, 0.6181642, -0.4126322) (1.127527, 0.6186072, -0.4121043) (1.12861, 0.6189703, -0.4116717) (1.129454, 0.619253, -0.4113348) (1.130057, 0.6194552, -0.4110939) (1.130419, 0.6195765, -0.4109492) (1.13054, 0.619617, -0.410901) (0.629187, 0.644824, -0.430852) (0.6292973, 0.64469, -0.4308457) (0.6296281, 0.6442881, -0.4308268) (0.6301791, 0.6436188, -0.4307954) (0.6309497, 0.6426827, -0.4307515) (0.6319392, 0.6414807, -0.4306951) (0.6331465, 0.6400141, -0.4306262) (0.6345706, 0.6382841, -0.430545) (0.63621, 0.6362927, -0.4304515) (0.638063, 0.6340416, -0.4303459) (0.6401278, 0.6315333, -0.4302281) (0.6424025, 0.62877, -0.4300984) (0.6449042, 0.6257707, -0.4299564) (0.6476163, 0.6225267, -0.4298025) (0.6505328, 0.6190383, -0.429637) (0.6536507, 0.6153089, -0.42946) (0.6569751, 0.6113492, -0.4292717) (0.6605202, 0.6071776, -0.4290715) (0.6642587, 0.6027784, -0.4288605) (0.6681871, 0.5981559, -0.4286387) (0.6723322, 0.5933411, -0.4284056) (0.6766713, 0.5883227, -0.4281619) (0.6811897, 0.5830968, -0.4279081) (0.685923, 0.5777035, -0.4276435) (0.6908374, 0.5721228, -0.427369) (0.695933, 0.5663644, -0.4270849) (0.7012339, 0.5604603, -0.4267905) (0.7066935, 0.5543795, -0.4264874) (0.712367, 0.5481828, -0.4261741) (0.7181932, 0.5418259, -0.4258526) (0.7242238, 0.5353684, -0.4255216) (0.7304041, 0.5287716, -0.4251826) (0.7367901, 0.5221009, -0.4248346) (0.7433216, 0.5153124, -0.4244791) (0.7500509, 0.5084696, -0.4241151) (0.7569393, 0.5015494, -0.4237437) (0.7639907, 0.4945693, -0.4233651) (0.7712361, 0.4875765, -0.4229787) (0.7786363, 0.4805464, -0.4225857) (0.7861965, 0.4734996, -0.4221863) (0.7939603, 0.466501, -0.4217795) (0.8018897, 0.4595278, -0.4213668) (0.8099906, 0.452605, -0.420948) (0.8182703, 0.4457608, -0.4205234) (0.8267372, 0.439027, -0.4200932) (0.8354009, 0.4324403, -0.4196574) (0.8442762, 0.4260484, -0.4192163) (0.8533633, 0.419884, -0.4187702) (0.8626865, 0.4140224, -0.4183194) (0.8722541, 0.4085269, -0.4178645) (0.8820768, 0.4034801, -0.4174063) (0.8921609, 0.3989799, -0.4169459) (0.9026413, 0.3955829, -0.4164864) (0.9135374, 0.3941587, -0.4160398) (0.9243624, 0.3957915, -0.4156413) (0.9341812, 0.4005358, -0.415328) (0.9424477, 0.4075943, -0.4151096) (0.9493346, 0.4159337, -0.4149641) (0.9552674, 0.4248927, -0.4148649) (0.960591, 0.434132, -0.4147937) (0.965525, 0.4434769, -0.4147393) (0.9703131, 0.452777, -0.4146899) (0.9751208, 0.4619342, -0.4146376) (0.9800739, 0.4708671, -0.4145763) (0.985359, 0.4794442, -0.4144968) (0.9910768, 0.487557, -0.4143935) (0.9973937, 0.495001, -0.414257) (1.004265, 0.5017053, -0.4140878) (1.011155, 0.5081382, -0.4139139) (1.017908, 0.5144442, -0.4137435) (1.024518, 0.5206169, -0.4135767) (1.03098, 0.5266503, -0.4134136) (1.037285, 0.5325385, -0.4132545) (1.043429, 0.5382755, -0.4130994) (1.049405, 0.5438558, -0.4129486) (1.055208, 0.5492739, -0.4128022) (1.060831, 0.5545244, -0.4126603) (1.066269, 0.5596021, -0.412523) (1.071516, 0.564502, -0.4123906) (1.076568, 0.5692193, -0.4122631) (1.081419, 0.5737493, -0.4121407) (1.086065, 0.5780876, -0.4120234) (1.090501, 0.5822298, -0.4119115) (1.094723, 0.5861719, -0.4118049) (1.098726, 0.58991, -0.4117039) (1.102507, 0.5934404, -0.4116085) (1.106061, 0.5967597, -0.4115188) (1.109386, 0.5998644, -0.4114349) (1.112478, 0.6027517, -0.4113568) (1.115335, 0.6054186, -0.4112847) (1.117952, 0.6078624, -0.4112187) (1.120327, 0.6100809, -0.4111587) (1.12246, 0.6120718, -0.4111049) (1.124346, 0.613833, -0.4110573) (1.125984, 0.615363, -0.411016) (1.127373, 0.6166602, -0.4109809) (1.128512, 0.6177232, -0.4109522) (1.129399, 0.6185511, -0.4109298) (1.130032, 0.6191431, -0.4109138) (1.130413, 0.6194985, -0.4109042) (1.13054, 0.619617, -0.410901) (0.629187, 0.644824, -0.430852) (0.6292902, 0.644749, -0.4307828) (0.6295998, 0.6445243, -0.4305752) (0.6301153, 0.6441501, -0.4302295) (0.6308364, 0.6436266, -0.4297459) (0.6317623, 0.6429545, -0.429125) (0.6328921, 0.6421343, -0.4283673) (0.6342246, 0.6411669, -0.4274737) (0.6357586, 0.6400533, -0.426445) (0.6374925, 0.6387945, -0.4252822) (0.6394247, 0.6373919, -0.4239865) (0.6415722, 0.6358607, -0.4225724) (0.6439189, 0.6341924, -0.4210316) (0.6464596, 0.6323862, -0.4193634) (0.6491917, 0.6304439, -0.4175696) (0.6521334, 0.6283835, -0.415667) (0.655273, 0.6262, -0.4136509) (0.6585971, 0.623888, -0.4115161) (0.6621211, 0.621464, -0.4092783) (0.6658446, 0.6189331, -0.406942) (0.6697443, 0.6162824, -0.4044952) (0.6738525, 0.6135433, -0.4019673) (0.67814, 0.6106985, -0.399342) (0.6826162, 0.6077621, -0.3966326) (0.6872836, 0.6047427, -0.393847) (0.6921287, 0.6016364, -0.3909815) (0.6971669, 0.5984631, -0.3880549) (0.7023807, 0.5952161, -0.3850608) (0.7077788, 0.5919105, -0.3820132) (0.7133604, 0.5885546, -0.37892) (0.7191061, 0.5851393, -0.3757725) (0.7250533, 0.5817081, -0.3726116) (0.731162, 0.5782341, -0.3694119) (0.7374422, 0.574736, -0.3661909) (0.7439142, 0.5712447, -0.3629777) (0.7505502, 0.5677444, -0.3597573) (0.7573519, 0.5642478, -0.3565414) (0.7643312, 0.5607798, -0.3533535) (0.7714906, 0.5573576, -0.3502097) (0.7788165, 0.5539808, -0.3471094) (0.7863097, 0.5506657, -0.344068) (0.7939709, 0.5474297, -0.3411016) (0.8018, 0.5442917, -0.3382278) (0.8097965, 0.5412719, -0.3354657) (0.8179587, 0.5383922, -0.3328355) (0.8262837, 0.535676, -0.3303591) (0.8347669, 0.5331483, -0.3280599) (0.8434015, 0.5308358, -0.3259626) (0.852178, 0.5287666, -0.3240935) (0.8611133, 0.5270557, -0.3225601) (0.8622191, 0.724072, -0.05144229) (0.8794521, 0.5255934, -0.3213259) (0.888665, 0.525869, -0.321649) (0.8977494, 0.5269201, -0.3226952) (0.9066354, 0.5285676, -0.3242968) (0.9152374, 0.5307999, -0.3264424) (0.9235514, 0.5334719, -0.3289964) (0.931576, 0.5364936, -0.3318748) (0.9393349, 0.5397744, -0.3349932) (0.9468846, 0.5432073, -0.3382522) (0.9542481, 0.5467433, -0.341606) (0.9614916, 0.5502931, -0.3449719) (0.9686558, 0.5538008, -0.3482978) (0.9757894, 0.5572008, -0.3515232) (0.9829231, 0.5604445, -0.3546024) (0.9900994, 0.5634609, -0.3574699) (0.9973494, 0.5661775, -0.3600579) (1.00461, 0.5686494, -0.3624175) (1.011745, 0.5710648, -0.3647235) (1.01871, 0.5734757, -0.3670242) (1.025504, 0.575873, -0.3693107) (1.032121, 0.578252, -0.3715791) (1.038553, 0.5806099, -0.3738264) (1.044795, 0.5829434, -0.3760497) (1.050845, 0.5852447, -0.3782414) (1.056697, 0.587509, -0.3803971) (1.062346, 0.5897315, -0.3825125) (1.067791, 0.5919076, -0.384583) (1.073025, 0.5940326, -0.3866042) (1.078047, 0.5961015, -0.3885717) (1.082852, 0.5981097, -0.3904809) (1.087439, 0.6000524, -0.3923274) (1.091804, 0.6019247, -0.3941066) (1.095946, 0.6037219, -0.395814) (1.09986, 0.6054429, -0.3974488) (1.103545, 0.6070819, -0.3990053) (1.107002, 0.6086326, -0.4004777) (1.110227, 0.6100927, -0.4018639) (1.113216, 0.6114622, -0.4031639) (1.115974, 0.6127306, -0.4043677) (1.118492, 0.6139038, -0.405481) (1.120777, 0.6149692, -0.4064921) (1.12282, 0.6159347, -0.407408) (1.124627, 0.6167887, -0.4082183) (1.126194, 0.6175334, -0.4089247) (1.127519, 0.6181688, -0.4095273) (1.128605, 0.6186894, -0.4100212) (1.129451, 0.619095, -0.4104058) (1.130056, 0.6193849, -0.4106808) (1.130419, 0.6195589, -0.4108459) (1.13054, 0.619617, -0.410901)';
%     distinctPaths_in_function= distincts_together;
%     num_of_distinct_paths=length(distinctPaths);
    coordStrings = strsplit(modified_path, ') ');
    coordStrings = coordStrings (1:end-1); % Remove the last empty element
    % Initialize coordinate vectors
    x_m_p = zeros(length(coordStrings),1);
    y_m_p = zeros(length(coordStrings),1);
    z_m_p = zeros(length(coordStrings),1);
    
    % Parse each coordinate string
    for i = 1:length(coordStrings)
        coordString = coordStrings{i};
        coordString = strrep(coordString, '(', '');
        coordString = strrep(coordString, ')', '');
        coords = str2num(coordString); % Convert string to numbers
        x_m_p(i) = coords(3)+ax;
        y_m_p(i) = -coords(1)+ay;
        z_m_p(i) = coords(2)+az;
    end
    modified_path_vec=[x_m_p,y_m_p,z_m_p];
    % Check if inputs are of the same size
    if ~isequal(size(modified_path_vec), size(distinctPaths_in_function))
        error('The size of "modified_path_vec" and "distinctPaths_in_function" must be the same.');
    end
    
    % Check if their row count is a multiple of "num_of_distinct_paths"
    numRows = size(modified_path_vec, 1);
    if mod(numRows, num_of_distinct_paths) ~= 0
        error('"num_of_distinct_paths" must be a divisor of the number of rows in "modified_path_vec" and "distinctPaths_in_function".');
    end
    
    % Calculate the size for the rearranged arrays
    newSize = numRows / num_of_distinct_paths;
    
    % Preallocate arrays for the output
    modifiedPathArray = zeros(newSize, 3, num_of_distinct_paths);
    distinctPathArray = zeros(newSize, 3, num_of_distinct_paths);
    
    % Fill in the output arrays
    for i = 1:num_of_distinct_paths
        startIndex = (i - 1) * newSize + 1;
        endIndex = i * newSize;
        modifiedPathArray(:, :, i) = modified_path_vec(startIndex:endIndex, :);
        distinctPathArray(:, :, i) = distinctPaths_in_function(startIndex:endIndex, :);
    end
    % Assuming modifiedPathArray and distinctPathArray have been defined and populated as before

    tolerance = 0.0005;
    iNotEqual = []; % To store the index where arrays differ
    differencesCount = []; % To keep track of differences for each i
    
    for i = 1:num_of_distinct_paths
        % Calculate the difference between the arrays
        difference = abs(modifiedPathArray(:, :, i) - distinctPathArray(:, :, i));
        
        % Check if the difference exceeds tolerance
        if any(difference > tolerance, 'all')
            differencesCount(i) = sum(difference > tolerance, 'all'); %#ok<AGROW> % Count differences
            iNotEqual(end+1) = i; %#ok<AGROW> % Append the index where difference exceeds tolerance
        else
            differencesCount(i) = 0; %#ok<AGROW> % No significant difference
        end
    end
    
    % Check for the unique i where differences are within the expected range
    if length(iNotEqual) > 1
        error('More than one path for which arrays differ beyond the specified tolerance.');
    elseif isempty(iNotEqual)
        error('No path found where arrays differ within the specified tolerance.');
    end
    points=distinctPathArray(:,:,iNotEqual);
end